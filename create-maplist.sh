#!/bin/bash
# Description: Create a maplist for a specific gametype based on the maps found in your data directory (default folder: ~/.xonotic/data/)
# Usage: ./create_maplist.sh [gametype] [directory] [output type]
#
# [gametype]:  (dm|tdm|ctf|lms|dom ... etc); default gametype is dm
# [directory]:  (Optional) if you wan to use a folder other than ~/.xonotic/data
# [output type]: (Optional) if you'd like to output campaign instead of g_maplist (lying aboutt this)
# TODO: refactor the code to simplify and generate an array that will loop through and output either type ^

create_maplist() {
  # Start the maplist string
  data=""
  #i="g_maplist=\""
  
  # Get Gametype
  if [[ "$1" != "" ]]; then
    t=$1
  else
    echo; echo "[WARNING] No gametype has been set, setting to dm"
    t="dm"
  fi
  
  # Handle Optional Directory Parameter
  if [[ "$2" != "" ]]; then
    if [[ -d "$2" ]]; then
      d=$2
    fi
  else
    d=$HOME/.xonotic/data
  fi

  # Get the a list of all properly packaged bsps
  for map in $(ls $d/*.pk3); do
    
    # Used to tell if the package mapinfo and generate map info exist
    m=false
    m2=false
    
    # List contents, grab the name of the bsp, remove the folder name, drop any bsp not in the maps folder
    mapname=$(unzip -l $map | grep .bsp | awk '{ print $4 }' | sed 's/maps\/\([A-Za-z_0-9.-]*\)\.bsp/\1/' | grep -vi .bsp)
    # If a map bsp is present
    if [[ "$mapname" != "" ]]; then
    
      # Check mapinfo's gametype against $t
      echo
      game_type=$(unzip -p $map maps/$mapname.mapinfo | grep "^type")
      
      if [[ "$game_type" != "" ]]; then
        echo "Checking package ($map) for mapinfo: [OK]"
        m=true
        
        game_type=$(unzip -p $map maps/$mapname.mapinfo | grep "^type $t")
        if [[ "$game_type" == "" ]]; then
          echo "Checking mapinfo for gametype compatiability ($mapname): [NO]"
        else
          # The mapinfo from the package has this gametype
          echo "Checking mapinfo for gametype compatiability ($mapname): [OK]"
        fi
      else
        echo "Checking package ($mapname) for mapinfo: [FAILED]"
      fi
      
      # If it doesn't exist, check the generated mapinfo folder
      if [[ "$game_type" == "" ]]; then
      
        echo "Checking $d/data/maps/autogenerated for generated mapinfo: $mapname.mapinfo"
        cd $d/data/maps/autogenerated

        if [[ ! -r "$mapname.mapinfo" ]]; then
          echo "[WARNING] No generated mapinfo found for $mapname - not adding to list"
          status="warning"
        else
          # the generated mapinfo file exists
          echo "Check for generated $mapname.mapinfo file: [OK]"
          m2=true
                    
          game_type=$(grep "^type $t" $mapname.mapinfo)
          
          if [[ "$game_type" != "" ]]; then
            # The check for the generated mapinfo compatiability passed
            echo "Checking generated mapinfo for gametype compatiability ($t): [OK]"
          fi
        fi
      fi
      
      # Everything looks good, add it to the list.
      if [[ "$game_type" != "" ]]; then
        # Print with quotes and a comma then append to string 'i'
        echo "[ADDING] $mapname to the list"
        #if [[ $3 != "" ]]; then
        # two minutes long, kill yourself to end match
        mapname='"'$t'","'$mapname'","0","1","-1","2",,"",""\n'
        #else
        #  mapname="$t"\_"$mapname "
        #fi
        data=$data$mapname
      else
        if [[ $m2 == true ]]; then
          echo "Checking generated mapinfo for gametype compatiability ($t): [NO]"
        fi
      fi

    fi
  done

  # Trim the last space and echo maplist
  #i=$(echo $i | sed 's/ $//')
  #i=$i"\""
  
  if [[ "$status" == "warning" ]]; then
    echo; echo "[WARNING] Some maps weren't added because no mapinfo files were found.  Some maps may not be included!  Restart Xonotic to generate them automatically, then run this script again."
  fi

  ouput='//campaign:Rate Maps 0.3 by -z-\n//"game","mapname","bots","skill","fraglimit","timelimit","mutator-sets","description","long description"\n'$data
  #echo; echo "-- Printing $t Maplist -----------"; echo; echo -e $i; echo
  echo -e $ouput > $d/maps/campaignratemaps.txt
} # End create_maplist

create_maplist $1 $2 $3
